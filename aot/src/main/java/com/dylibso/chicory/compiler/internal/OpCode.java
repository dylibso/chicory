package com.dylibso.chicory.compiler.internal;

import java.util.EnumMap;
import java.util.Map;
import java.util.Optional;

enum OpCode {
    LABEL,
    DROP_KEEP,
    TRAP,
    GOTO,
    IFEQ,
    IFNE,
    SWITCH,
    RETURN(com.dylibso.chicory.wasm.types.OpCode.RETURN),
    CALL(com.dylibso.chicory.wasm.types.OpCode.CALL),
    CALL_INDIRECT(com.dylibso.chicory.wasm.types.OpCode.CALL_INDIRECT),
    DROP(com.dylibso.chicory.wasm.types.OpCode.DROP),
    SELECT(com.dylibso.chicory.wasm.types.OpCode.SELECT),
    LOCAL_GET(com.dylibso.chicory.wasm.types.OpCode.LOCAL_GET),
    LOCAL_SET(com.dylibso.chicory.wasm.types.OpCode.LOCAL_SET),
    LOCAL_TEE(com.dylibso.chicory.wasm.types.OpCode.LOCAL_TEE),
    GLOBAL_GET(com.dylibso.chicory.wasm.types.OpCode.GLOBAL_GET),
    GLOBAL_SET(com.dylibso.chicory.wasm.types.OpCode.GLOBAL_SET),
    TABLE_GET(com.dylibso.chicory.wasm.types.OpCode.TABLE_GET),
    TABLE_SET(com.dylibso.chicory.wasm.types.OpCode.TABLE_SET),
    I32_LOAD(com.dylibso.chicory.wasm.types.OpCode.I32_LOAD),
    I64_LOAD(com.dylibso.chicory.wasm.types.OpCode.I64_LOAD),
    F32_LOAD(com.dylibso.chicory.wasm.types.OpCode.F32_LOAD),
    F64_LOAD(com.dylibso.chicory.wasm.types.OpCode.F64_LOAD),
    I32_LOAD8_S(com.dylibso.chicory.wasm.types.OpCode.I32_LOAD8_S),
    I32_LOAD8_U(com.dylibso.chicory.wasm.types.OpCode.I32_LOAD8_U),
    I32_LOAD16_S(com.dylibso.chicory.wasm.types.OpCode.I32_LOAD16_S),
    I32_LOAD16_U(com.dylibso.chicory.wasm.types.OpCode.I32_LOAD16_U),
    I64_LOAD8_S(com.dylibso.chicory.wasm.types.OpCode.I64_LOAD8_S),
    I64_LOAD8_U(com.dylibso.chicory.wasm.types.OpCode.I64_LOAD8_U),
    I64_LOAD16_S(com.dylibso.chicory.wasm.types.OpCode.I64_LOAD16_S),
    I64_LOAD16_U(com.dylibso.chicory.wasm.types.OpCode.I64_LOAD16_U),
    I64_LOAD32_S(com.dylibso.chicory.wasm.types.OpCode.I64_LOAD32_S),
    I64_LOAD32_U(com.dylibso.chicory.wasm.types.OpCode.I64_LOAD32_U),
    I32_STORE(com.dylibso.chicory.wasm.types.OpCode.I32_STORE),
    I64_STORE(com.dylibso.chicory.wasm.types.OpCode.I64_STORE),
    F32_STORE(com.dylibso.chicory.wasm.types.OpCode.F32_STORE),
    F64_STORE(com.dylibso.chicory.wasm.types.OpCode.F64_STORE),
    I32_STORE8(com.dylibso.chicory.wasm.types.OpCode.I32_STORE8),
    I32_STORE16(com.dylibso.chicory.wasm.types.OpCode.I32_STORE16),
    I64_STORE8(com.dylibso.chicory.wasm.types.OpCode.I64_STORE8),
    I64_STORE16(com.dylibso.chicory.wasm.types.OpCode.I64_STORE16),
    I64_STORE32(com.dylibso.chicory.wasm.types.OpCode.I64_STORE32),
    MEMORY_SIZE(com.dylibso.chicory.wasm.types.OpCode.MEMORY_SIZE),
    MEMORY_GROW(com.dylibso.chicory.wasm.types.OpCode.MEMORY_GROW),
    I32_CONST(com.dylibso.chicory.wasm.types.OpCode.I32_CONST),
    I64_CONST(com.dylibso.chicory.wasm.types.OpCode.I64_CONST),
    F32_CONST(com.dylibso.chicory.wasm.types.OpCode.F32_CONST),
    F64_CONST(com.dylibso.chicory.wasm.types.OpCode.F64_CONST),
    I32_EQZ(com.dylibso.chicory.wasm.types.OpCode.I32_EQZ),
    I32_EQ(com.dylibso.chicory.wasm.types.OpCode.I32_EQ),
    I32_NE(com.dylibso.chicory.wasm.types.OpCode.I32_NE),
    I32_LT_S(com.dylibso.chicory.wasm.types.OpCode.I32_LT_S),
    I32_LT_U(com.dylibso.chicory.wasm.types.OpCode.I32_LT_U),
    I32_GT_S(com.dylibso.chicory.wasm.types.OpCode.I32_GT_S),
    I32_GT_U(com.dylibso.chicory.wasm.types.OpCode.I32_GT_U),
    I32_LE_S(com.dylibso.chicory.wasm.types.OpCode.I32_LE_S),
    I32_LE_U(com.dylibso.chicory.wasm.types.OpCode.I32_LE_U),
    I32_GE_S(com.dylibso.chicory.wasm.types.OpCode.I32_GE_S),
    I32_GE_U(com.dylibso.chicory.wasm.types.OpCode.I32_GE_U),
    I64_EQZ(com.dylibso.chicory.wasm.types.OpCode.I64_EQZ),
    I64_EQ(com.dylibso.chicory.wasm.types.OpCode.I64_EQ),
    I64_NE(com.dylibso.chicory.wasm.types.OpCode.I64_NE),
    I64_LT_S(com.dylibso.chicory.wasm.types.OpCode.I64_LT_S),
    I64_LT_U(com.dylibso.chicory.wasm.types.OpCode.I64_LT_U),
    I64_GT_S(com.dylibso.chicory.wasm.types.OpCode.I64_GT_S),
    I64_GT_U(com.dylibso.chicory.wasm.types.OpCode.I64_GT_U),
    I64_LE_S(com.dylibso.chicory.wasm.types.OpCode.I64_LE_S),
    I64_LE_U(com.dylibso.chicory.wasm.types.OpCode.I64_LE_U),
    I64_GE_S(com.dylibso.chicory.wasm.types.OpCode.I64_GE_S),
    I64_GE_U(com.dylibso.chicory.wasm.types.OpCode.I64_GE_U),
    F32_EQ(com.dylibso.chicory.wasm.types.OpCode.F32_EQ),
    F32_NE(com.dylibso.chicory.wasm.types.OpCode.F32_NE),
    F32_LT(com.dylibso.chicory.wasm.types.OpCode.F32_LT),
    F32_GT(com.dylibso.chicory.wasm.types.OpCode.F32_GT),
    F32_LE(com.dylibso.chicory.wasm.types.OpCode.F32_LE),
    F32_GE(com.dylibso.chicory.wasm.types.OpCode.F32_GE),
    F64_EQ(com.dylibso.chicory.wasm.types.OpCode.F64_EQ),
    F64_NE(com.dylibso.chicory.wasm.types.OpCode.F64_NE),
    F64_LT(com.dylibso.chicory.wasm.types.OpCode.F64_LT),
    F64_GT(com.dylibso.chicory.wasm.types.OpCode.F64_GT),
    F64_LE(com.dylibso.chicory.wasm.types.OpCode.F64_LE),
    F64_GE(com.dylibso.chicory.wasm.types.OpCode.F64_GE),
    I32_CLZ(com.dylibso.chicory.wasm.types.OpCode.I32_CLZ),
    I32_CTZ(com.dylibso.chicory.wasm.types.OpCode.I32_CTZ),
    I32_POPCNT(com.dylibso.chicory.wasm.types.OpCode.I32_POPCNT),
    I32_ADD(com.dylibso.chicory.wasm.types.OpCode.I32_ADD),
    I32_SUB(com.dylibso.chicory.wasm.types.OpCode.I32_SUB),
    I32_MUL(com.dylibso.chicory.wasm.types.OpCode.I32_MUL),
    I32_DIV_S(com.dylibso.chicory.wasm.types.OpCode.I32_DIV_S),
    I32_DIV_U(com.dylibso.chicory.wasm.types.OpCode.I32_DIV_U),
    I32_REM_S(com.dylibso.chicory.wasm.types.OpCode.I32_REM_S),
    I32_REM_U(com.dylibso.chicory.wasm.types.OpCode.I32_REM_U),
    I32_AND(com.dylibso.chicory.wasm.types.OpCode.I32_AND),
    I32_OR(com.dylibso.chicory.wasm.types.OpCode.I32_OR),
    I32_XOR(com.dylibso.chicory.wasm.types.OpCode.I32_XOR),
    I32_SHL(com.dylibso.chicory.wasm.types.OpCode.I32_SHL),
    I32_SHR_S(com.dylibso.chicory.wasm.types.OpCode.I32_SHR_S),
    I32_SHR_U(com.dylibso.chicory.wasm.types.OpCode.I32_SHR_U),
    I32_ROTL(com.dylibso.chicory.wasm.types.OpCode.I32_ROTL),
    I32_ROTR(com.dylibso.chicory.wasm.types.OpCode.I32_ROTR),
    I64_CLZ(com.dylibso.chicory.wasm.types.OpCode.I64_CLZ),
    I64_CTZ(com.dylibso.chicory.wasm.types.OpCode.I64_CTZ),
    I64_POPCNT(com.dylibso.chicory.wasm.types.OpCode.I64_POPCNT),
    I64_ADD(com.dylibso.chicory.wasm.types.OpCode.I64_ADD),
    I64_SUB(com.dylibso.chicory.wasm.types.OpCode.I64_SUB),
    I64_MUL(com.dylibso.chicory.wasm.types.OpCode.I64_MUL),
    I64_DIV_S(com.dylibso.chicory.wasm.types.OpCode.I64_DIV_S),
    I64_DIV_U(com.dylibso.chicory.wasm.types.OpCode.I64_DIV_U),
    I64_REM_S(com.dylibso.chicory.wasm.types.OpCode.I64_REM_S),
    I64_REM_U(com.dylibso.chicory.wasm.types.OpCode.I64_REM_U),
    I64_AND(com.dylibso.chicory.wasm.types.OpCode.I64_AND),
    I64_OR(com.dylibso.chicory.wasm.types.OpCode.I64_OR),
    I64_XOR(com.dylibso.chicory.wasm.types.OpCode.I64_XOR),
    I64_SHL(com.dylibso.chicory.wasm.types.OpCode.I64_SHL),
    I64_SHR_S(com.dylibso.chicory.wasm.types.OpCode.I64_SHR_S),
    I64_SHR_U(com.dylibso.chicory.wasm.types.OpCode.I64_SHR_U),
    I64_ROTL(com.dylibso.chicory.wasm.types.OpCode.I64_ROTL),
    I64_ROTR(com.dylibso.chicory.wasm.types.OpCode.I64_ROTR),
    F32_ABS(com.dylibso.chicory.wasm.types.OpCode.F32_ABS),
    F32_NEG(com.dylibso.chicory.wasm.types.OpCode.F32_NEG),
    F32_CEIL(com.dylibso.chicory.wasm.types.OpCode.F32_CEIL),
    F32_FLOOR(com.dylibso.chicory.wasm.types.OpCode.F32_FLOOR),
    F32_TRUNC(com.dylibso.chicory.wasm.types.OpCode.F32_TRUNC),
    F32_NEAREST(com.dylibso.chicory.wasm.types.OpCode.F32_NEAREST),
    F32_SQRT(com.dylibso.chicory.wasm.types.OpCode.F32_SQRT),
    F32_ADD(com.dylibso.chicory.wasm.types.OpCode.F32_ADD),
    F32_SUB(com.dylibso.chicory.wasm.types.OpCode.F32_SUB),
    F32_MUL(com.dylibso.chicory.wasm.types.OpCode.F32_MUL),
    F32_DIV(com.dylibso.chicory.wasm.types.OpCode.F32_DIV),
    F32_MIN(com.dylibso.chicory.wasm.types.OpCode.F32_MIN),
    F32_MAX(com.dylibso.chicory.wasm.types.OpCode.F32_MAX),
    F32_COPYSIGN(com.dylibso.chicory.wasm.types.OpCode.F32_COPYSIGN),
    F64_ABS(com.dylibso.chicory.wasm.types.OpCode.F64_ABS),
    F64_NEG(com.dylibso.chicory.wasm.types.OpCode.F64_NEG),
    F64_CEIL(com.dylibso.chicory.wasm.types.OpCode.F64_CEIL),
    F64_FLOOR(com.dylibso.chicory.wasm.types.OpCode.F64_FLOOR),
    F64_TRUNC(com.dylibso.chicory.wasm.types.OpCode.F64_TRUNC),
    F64_NEAREST(com.dylibso.chicory.wasm.types.OpCode.F64_NEAREST),
    F64_SQRT(com.dylibso.chicory.wasm.types.OpCode.F64_SQRT),
    F64_ADD(com.dylibso.chicory.wasm.types.OpCode.F64_ADD),
    F64_SUB(com.dylibso.chicory.wasm.types.OpCode.F64_SUB),
    F64_MUL(com.dylibso.chicory.wasm.types.OpCode.F64_MUL),
    F64_DIV(com.dylibso.chicory.wasm.types.OpCode.F64_DIV),
    F64_MIN(com.dylibso.chicory.wasm.types.OpCode.F64_MIN),
    F64_MAX(com.dylibso.chicory.wasm.types.OpCode.F64_MAX),
    F64_COPYSIGN(com.dylibso.chicory.wasm.types.OpCode.F64_COPYSIGN),
    I32_WRAP_I64(com.dylibso.chicory.wasm.types.OpCode.I32_WRAP_I64),
    I32_TRUNC_F32_S(com.dylibso.chicory.wasm.types.OpCode.I32_TRUNC_F32_S),
    I32_TRUNC_F32_U(com.dylibso.chicory.wasm.types.OpCode.I32_TRUNC_F32_U),
    I32_TRUNC_F64_S(com.dylibso.chicory.wasm.types.OpCode.I32_TRUNC_F64_S),
    I32_TRUNC_F64_U(com.dylibso.chicory.wasm.types.OpCode.I32_TRUNC_F64_U),
    I64_EXTEND_I32_S(com.dylibso.chicory.wasm.types.OpCode.I64_EXTEND_I32_S),
    I64_EXTEND_I32_U(com.dylibso.chicory.wasm.types.OpCode.I64_EXTEND_I32_U),
    I64_TRUNC_F32_S(com.dylibso.chicory.wasm.types.OpCode.I64_TRUNC_F32_S),
    I64_TRUNC_F32_U(com.dylibso.chicory.wasm.types.OpCode.I64_TRUNC_F32_U),
    I64_TRUNC_F64_S(com.dylibso.chicory.wasm.types.OpCode.I64_TRUNC_F64_S),
    I64_TRUNC_F64_U(com.dylibso.chicory.wasm.types.OpCode.I64_TRUNC_F64_U),
    F32_CONVERT_I32_S(com.dylibso.chicory.wasm.types.OpCode.F32_CONVERT_I32_S),
    F32_CONVERT_I32_U(com.dylibso.chicory.wasm.types.OpCode.F32_CONVERT_I32_U),
    F32_CONVERT_I64_S(com.dylibso.chicory.wasm.types.OpCode.F32_CONVERT_I64_S),
    F32_CONVERT_I64_U(com.dylibso.chicory.wasm.types.OpCode.F32_CONVERT_I64_U),
    F32_DEMOTE_F64(com.dylibso.chicory.wasm.types.OpCode.F32_DEMOTE_F64),
    F64_CONVERT_I32_S(com.dylibso.chicory.wasm.types.OpCode.F64_CONVERT_I32_S),
    F64_CONVERT_I32_U(com.dylibso.chicory.wasm.types.OpCode.F64_CONVERT_I32_U),
    F64_CONVERT_I64_S(com.dylibso.chicory.wasm.types.OpCode.F64_CONVERT_I64_S),
    F64_CONVERT_I64_U(com.dylibso.chicory.wasm.types.OpCode.F64_CONVERT_I64_U),
    F64_PROMOTE_F32(com.dylibso.chicory.wasm.types.OpCode.F64_PROMOTE_F32),
    I32_REINTERPRET_F32(com.dylibso.chicory.wasm.types.OpCode.I32_REINTERPRET_F32),
    I64_REINTERPRET_F64(com.dylibso.chicory.wasm.types.OpCode.I64_REINTERPRET_F64),
    F32_REINTERPRET_I32(com.dylibso.chicory.wasm.types.OpCode.F32_REINTERPRET_I32),
    F64_REINTERPRET_I64(com.dylibso.chicory.wasm.types.OpCode.F64_REINTERPRET_I64),
    I32_EXTEND_8_S(com.dylibso.chicory.wasm.types.OpCode.I32_EXTEND_8_S),
    I32_EXTEND_16_S(com.dylibso.chicory.wasm.types.OpCode.I32_EXTEND_16_S),
    I64_EXTEND_8_S(com.dylibso.chicory.wasm.types.OpCode.I64_EXTEND_8_S),
    I64_EXTEND_16_S(com.dylibso.chicory.wasm.types.OpCode.I64_EXTEND_16_S),
    I64_EXTEND_32_S(com.dylibso.chicory.wasm.types.OpCode.I64_EXTEND_32_S),
    REF_NULL(com.dylibso.chicory.wasm.types.OpCode.REF_NULL),
    REF_IS_NULL(com.dylibso.chicory.wasm.types.OpCode.REF_IS_NULL),
    REF_FUNC(com.dylibso.chicory.wasm.types.OpCode.REF_FUNC),
    I32_TRUNC_SAT_F32_S(com.dylibso.chicory.wasm.types.OpCode.I32_TRUNC_SAT_F32_S),
    I32_TRUNC_SAT_F32_U(com.dylibso.chicory.wasm.types.OpCode.I32_TRUNC_SAT_F32_U),
    I32_TRUNC_SAT_F64_S(com.dylibso.chicory.wasm.types.OpCode.I32_TRUNC_SAT_F64_S),
    I32_TRUNC_SAT_F64_U(com.dylibso.chicory.wasm.types.OpCode.I32_TRUNC_SAT_F64_U),
    I64_TRUNC_SAT_F32_S(com.dylibso.chicory.wasm.types.OpCode.I64_TRUNC_SAT_F32_S),
    I64_TRUNC_SAT_F32_U(com.dylibso.chicory.wasm.types.OpCode.I64_TRUNC_SAT_F32_U),
    I64_TRUNC_SAT_F64_S(com.dylibso.chicory.wasm.types.OpCode.I64_TRUNC_SAT_F64_S),
    I64_TRUNC_SAT_F64_U(com.dylibso.chicory.wasm.types.OpCode.I64_TRUNC_SAT_F64_U),
    MEMORY_INIT(com.dylibso.chicory.wasm.types.OpCode.MEMORY_INIT),
    DATA_DROP(com.dylibso.chicory.wasm.types.OpCode.DATA_DROP),
    MEMORY_COPY(com.dylibso.chicory.wasm.types.OpCode.MEMORY_COPY),
    MEMORY_FILL(com.dylibso.chicory.wasm.types.OpCode.MEMORY_FILL),
    TABLE_INIT(com.dylibso.chicory.wasm.types.OpCode.TABLE_INIT),
    ELEM_DROP(com.dylibso.chicory.wasm.types.OpCode.ELEM_DROP),
    TABLE_COPY(com.dylibso.chicory.wasm.types.OpCode.TABLE_COPY),
    TABLE_GROW(com.dylibso.chicory.wasm.types.OpCode.TABLE_GROW),
    TABLE_SIZE(com.dylibso.chicory.wasm.types.OpCode.TABLE_SIZE),
    TABLE_FILL(com.dylibso.chicory.wasm.types.OpCode.TABLE_FILL),
    ;

    private final Optional<com.dylibso.chicory.wasm.types.OpCode> opcode;

    private static final Map<com.dylibso.chicory.wasm.types.OpCode, OpCode> OPCODES =
            new EnumMap<>(com.dylibso.chicory.wasm.types.OpCode.class);

    static {
        for (OpCode aot : values()) {
            aot.opcode.ifPresent(opcode -> OPCODES.put(opcode, aot));
        }
    }

    OpCode() {
        this.opcode = Optional.empty();
    }

    OpCode(com.dylibso.chicory.wasm.types.OpCode opcode) {
        this.opcode = Optional.of(opcode);
    }

    public com.dylibso.chicory.wasm.types.OpCode opcode() {
        return opcode.orElseThrow(() -> new IllegalStateException("No opcode for " + this));
    }

    public static OpCode of(com.dylibso.chicory.wasm.types.OpCode opcode) {
        OpCode value = OPCODES.get(opcode);
        if (value == null) {
            throw new IllegalArgumentException("No AOT opcode for " + opcode);
        }
        return value;
    }
}
