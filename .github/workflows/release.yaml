name: release

on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Version being released'
        required: true
      branch:
        description: 'Branch to release from'
        required: true
        default: 'main'

permissions:
  contents: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Configure build steps as you'd normally do

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_CENTRAL_TOKEN
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Setup Git
        run: |
          git config user.name "Chicory BOT"
          git config user.email "chicory@dylibso.com"

      - name: Set the version
        run: |
          mvn versions:set -DgenerateBackupPoms=false -DnewVersion=${{ github.event.inputs.release-version }}
          git add .
          git commit -m "Release version update ${{ github.event.inputs.release-version }}"
          git push
          git tag ${{ github.event.inputs.release-version }}
          git push origin ${{ github.event.inputs.release-version }}
        env:
          GITHUB_TOKEN: ${{secrets.GH_TOKEN}}

      - name: Release to Maven Central
        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.SONATYPE_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          export GPG_TTY=$(tty)
          mvn -B --file pom.xml release:prepare release:perform

      # Create a release

      - name: Run JReleaser
        uses: jreleaser/release-action@v2
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      # Persist logs

      - name: JReleaser release output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties

      - name: Back to Snapshot
        run: |
          mvn versions:set -DgenerateBackupPoms=false -DnewVersion=999-SNAPSHOT
          git add .
          git commit -m "Snapshot version update"
          git push
        env:
          GITHUB_TOKEN: ${{secrets.GH_TOKEN}}
